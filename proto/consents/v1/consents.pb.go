// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/consents/v1/consents.proto

// Package v1 provides protocol buffer versions of Remembered Consents API for
// listing and revoking Remembered consents.
package v1

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// RequestMatchType defines what request is valid to use this consent.
type ConsentV1_RequestMatchType int32

const (
	// NONE : do not remember.
	ConsentV1_NONE ConsentV1_RequestMatchType = 0
	// SUBSET : request resource and scopes are subset of resource and scopes in
	// this item.
	ConsentV1_SUBSET ConsentV1_RequestMatchType = 1
	// ANYTHING : request anything.
	ConsentV1_ANYTHING ConsentV1_RequestMatchType = 2
)

var ConsentV1_RequestMatchType_name = map[int32]string{
	0: "NONE",
	1: "SUBSET",
	2: "ANYTHING",
}

var ConsentV1_RequestMatchType_value = map[string]int32{
	"NONE":     0,
	"SUBSET":   1,
	"ANYTHING": 2,
}

func (x ConsentV1_RequestMatchType) String() string {
	return proto.EnumName(ConsentV1_RequestMatchType_name, int32(x))
}

func (ConsentV1_RequestMatchType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0bb2e176a5b7c192, []int{4, 0}
}

// ReleaseType defines what to release.
type ConsentV1_ReleaseType int32

const (
	ConsentV1_UNSPECIFIED ConsentV1_ReleaseType = 0
	// SELECTED : release selected visas of this item.
	ConsentV1_SELECTED ConsentV1_ReleaseType = 1
	// ANYTHING_NEEDED: release anything request needed.
	ConsentV1_ANYTHING_NEEDED ConsentV1_ReleaseType = 2
)

var ConsentV1_ReleaseType_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "SELECTED",
	2: "ANYTHING_NEEDED",
}

var ConsentV1_ReleaseType_value = map[string]int32{
	"UNSPECIFIED":     0,
	"SELECTED":        1,
	"ANYTHING_NEEDED": 2,
}

func (x ConsentV1_ReleaseType) String() string {
	return proto.EnumName(ConsentV1_ReleaseType_name, int32(x))
}

func (ConsentV1_ReleaseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0bb2e176a5b7c192, []int{4, 1}
}

// OAuth Consent.
//
// Deprecated: Do not use.
type Consent struct {
	// Name of the OAuth Consent.
	// Format: `consents/{consent_id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Identifies the user who gave the OAuth consent.
	// E.g. subject or account number
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// Identifies the client for which the OAuth consent was given.
	Client string `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
	// Identifies the items for which the OAuth consent was given.
	// E.g. JTI of a Visa JWT.
	Items []string `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
	// Identifies the scopes for which the OAuth consent was given.
	Scopes []string `protobuf:"bytes,5,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// Identifies the resources for which the OAuth consent was given.
	Resouces []string `protobuf:"bytes,6,rep,name=resouces,proto3" json:"resouces,omitempty"`
	// Time at which OAuth consent was first given.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Time at which consent was last updated.
	UpdateTime           *timestamp.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Consent) Reset()         { *m = Consent{} }
func (m *Consent) String() string { return proto.CompactTextString(m) }
func (*Consent) ProtoMessage()    {}
func (*Consent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb2e176a5b7c192, []int{0}
}

func (m *Consent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Consent.Unmarshal(m, b)
}
func (m *Consent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Consent.Marshal(b, m, deterministic)
}
func (m *Consent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Consent.Merge(m, src)
}
func (m *Consent) XXX_Size() int {
	return xxx_messageInfo_Consent.Size(m)
}
func (m *Consent) XXX_DiscardUnknown() {
	xxx_messageInfo_Consent.DiscardUnknown(m)
}

var xxx_messageInfo_Consent proto.InternalMessageInfo

func (m *Consent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Consent) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Consent) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *Consent) GetItems() []string {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Consent) GetScopes() []string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

func (m *Consent) GetResouces() []string {
	if m != nil {
		return m.Resouces
	}
	return nil
}

func (m *Consent) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Consent) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

type DeleteConsentRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ConsentId            string   `protobuf:"bytes,2,opt,name=consent_id,json=consentId,proto3" json:"consent_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteConsentRequest) Reset()         { *m = DeleteConsentRequest{} }
func (m *DeleteConsentRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteConsentRequest) ProtoMessage()    {}
func (*DeleteConsentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb2e176a5b7c192, []int{1}
}

func (m *DeleteConsentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteConsentRequest.Unmarshal(m, b)
}
func (m *DeleteConsentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteConsentRequest.Marshal(b, m, deterministic)
}
func (m *DeleteConsentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteConsentRequest.Merge(m, src)
}
func (m *DeleteConsentRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteConsentRequest.Size(m)
}
func (m *DeleteConsentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteConsentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteConsentRequest proto.InternalMessageInfo

func (m *DeleteConsentRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *DeleteConsentRequest) GetConsentId() string {
	if m != nil {
		return m.ConsentId
	}
	return ""
}

type ListConsentsRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Filter               string   `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	PageSize             int32    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken            string   `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListConsentsRequest) Reset()         { *m = ListConsentsRequest{} }
func (m *ListConsentsRequest) String() string { return proto.CompactTextString(m) }
func (*ListConsentsRequest) ProtoMessage()    {}
func (*ListConsentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb2e176a5b7c192, []int{2}
}

func (m *ListConsentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListConsentsRequest.Unmarshal(m, b)
}
func (m *ListConsentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListConsentsRequest.Marshal(b, m, deterministic)
}
func (m *ListConsentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListConsentsRequest.Merge(m, src)
}
func (m *ListConsentsRequest) XXX_Size() int {
	return xxx_messageInfo_ListConsentsRequest.Size(m)
}
func (m *ListConsentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListConsentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListConsentsRequest proto.InternalMessageInfo

func (m *ListConsentsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListConsentsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListConsentsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListConsentsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListConsentsResponse struct {
	Consents             []*Consent `protobuf:"bytes,1,rep,name=consents,proto3" json:"consents,omitempty"`
	NextPageToken        string     `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListConsentsResponse) Reset()         { *m = ListConsentsResponse{} }
func (m *ListConsentsResponse) String() string { return proto.CompactTextString(m) }
func (*ListConsentsResponse) ProtoMessage()    {}
func (*ListConsentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb2e176a5b7c192, []int{3}
}

func (m *ListConsentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListConsentsResponse.Unmarshal(m, b)
}
func (m *ListConsentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListConsentsResponse.Marshal(b, m, deterministic)
}
func (m *ListConsentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListConsentsResponse.Merge(m, src)
}
func (m *ListConsentsResponse) XXX_Size() int {
	return xxx_messageInfo_ListConsentsResponse.Size(m)
}
func (m *ListConsentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListConsentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListConsentsResponse proto.InternalMessageInfo

func (m *ListConsentsResponse) GetConsents() []*Consent {
	if m != nil {
		return m.Consents
	}
	return nil
}

func (m *ListConsentsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// ConsentV1 contains the consent a user has given for release of visas to a
// specific OAuth client.
type ConsentV1 struct {
	// name iin format: /users/{user_id}/consents/{consent_id}
	Name                 string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Client               *ConsentV1_Client          `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
	CreateTime           *timestamp.Timestamp       `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpireTime           *timestamp.Timestamp       `protobuf:"bytes,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	RequestMatchType     ConsentV1_RequestMatchType `protobuf:"varint,5,opt,name=request_match_type,json=requestMatchType,proto3,enum=consents.v1.ConsentV1_RequestMatchType" json:"request_match_type,omitempty"`
	RequestedResources   []string                   `protobuf:"bytes,6,rep,name=requested_resources,json=requestedResources,proto3" json:"requested_resources,omitempty"`
	RequestedScopes      []string                   `protobuf:"bytes,7,rep,name=requested_scopes,json=requestedScopes,proto3" json:"requested_scopes,omitempty"`
	ReleaseType          ConsentV1_ReleaseType      `protobuf:"varint,8,opt,name=release_type,json=releaseType,proto3,enum=consents.v1.ConsentV1_ReleaseType" json:"release_type,omitempty"`
	SelectedVisas        []*ConsentV1_Visa          `protobuf:"bytes,9,rep,name=selected_visas,json=selectedVisas,proto3" json:"selected_visas,omitempty"`
	ReleaseProfileName   bool                       `protobuf:"varint,10,opt,name=release_profile_name,json=releaseProfileName,proto3" json:"release_profile_name,omitempty"`
	ReleaseProfileEmail  bool                       `protobuf:"varint,11,opt,name=release_profile_email,json=releaseProfileEmail,proto3" json:"release_profile_email,omitempty"`
	ReleaseProfileOther  bool                       `protobuf:"varint,12,opt,name=release_profile_other,json=releaseProfileOther,proto3" json:"release_profile_other,omitempty"`
	ReleaseAccountAdmin  bool                       `protobuf:"varint,13,opt,name=release_account_admin,json=releaseAccountAdmin,proto3" json:"release_account_admin,omitempty"`
	ReleaseLink          bool                       `protobuf:"varint,14,opt,name=release_link,json=releaseLink,proto3" json:"release_link,omitempty"`
	ReleaseIdentities    bool                       `protobuf:"varint,15,opt,name=release_identities,json=releaseIdentities,proto3" json:"release_identities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ConsentV1) Reset()         { *m = ConsentV1{} }
func (m *ConsentV1) String() string { return proto.CompactTextString(m) }
func (*ConsentV1) ProtoMessage()    {}
func (*ConsentV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb2e176a5b7c192, []int{4}
}

func (m *ConsentV1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsentV1.Unmarshal(m, b)
}
func (m *ConsentV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsentV1.Marshal(b, m, deterministic)
}
func (m *ConsentV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsentV1.Merge(m, src)
}
func (m *ConsentV1) XXX_Size() int {
	return xxx_messageInfo_ConsentV1.Size(m)
}
func (m *ConsentV1) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsentV1.DiscardUnknown(m)
}

var xxx_messageInfo_ConsentV1 proto.InternalMessageInfo

func (m *ConsentV1) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConsentV1) GetClient() *ConsentV1_Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *ConsentV1) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *ConsentV1) GetExpireTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

func (m *ConsentV1) GetRequestMatchType() ConsentV1_RequestMatchType {
	if m != nil {
		return m.RequestMatchType
	}
	return ConsentV1_NONE
}

func (m *ConsentV1) GetRequestedResources() []string {
	if m != nil {
		return m.RequestedResources
	}
	return nil
}

func (m *ConsentV1) GetRequestedScopes() []string {
	if m != nil {
		return m.RequestedScopes
	}
	return nil
}

func (m *ConsentV1) GetReleaseType() ConsentV1_ReleaseType {
	if m != nil {
		return m.ReleaseType
	}
	return ConsentV1_UNSPECIFIED
}

func (m *ConsentV1) GetSelectedVisas() []*ConsentV1_Visa {
	if m != nil {
		return m.SelectedVisas
	}
	return nil
}

func (m *ConsentV1) GetReleaseProfileName() bool {
	if m != nil {
		return m.ReleaseProfileName
	}
	return false
}

func (m *ConsentV1) GetReleaseProfileEmail() bool {
	if m != nil {
		return m.ReleaseProfileEmail
	}
	return false
}

func (m *ConsentV1) GetReleaseProfileOther() bool {
	if m != nil {
		return m.ReleaseProfileOther
	}
	return false
}

func (m *ConsentV1) GetReleaseAccountAdmin() bool {
	if m != nil {
		return m.ReleaseAccountAdmin
	}
	return false
}

func (m *ConsentV1) GetReleaseLink() bool {
	if m != nil {
		return m.ReleaseLink
	}
	return false
}

func (m *ConsentV1) GetReleaseIdentities() bool {
	if m != nil {
		return m.ReleaseIdentities
	}
	return false
}

// Visa contains fields to match released visas user have.
type ConsentV1_Visa struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Source               string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	By                   string   `protobuf:"bytes,3,opt,name=by,proto3" json:"by,omitempty"`
	Iss                  string   `protobuf:"bytes,4,opt,name=iss,proto3" json:"iss,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsentV1_Visa) Reset()         { *m = ConsentV1_Visa{} }
func (m *ConsentV1_Visa) String() string { return proto.CompactTextString(m) }
func (*ConsentV1_Visa) ProtoMessage()    {}
func (*ConsentV1_Visa) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb2e176a5b7c192, []int{4, 0}
}

func (m *ConsentV1_Visa) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsentV1_Visa.Unmarshal(m, b)
}
func (m *ConsentV1_Visa) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsentV1_Visa.Marshal(b, m, deterministic)
}
func (m *ConsentV1_Visa) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsentV1_Visa.Merge(m, src)
}
func (m *ConsentV1_Visa) XXX_Size() int {
	return xxx_messageInfo_ConsentV1_Visa.Size(m)
}
func (m *ConsentV1_Visa) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsentV1_Visa.DiscardUnknown(m)
}

var xxx_messageInfo_ConsentV1_Visa proto.InternalMessageInfo

func (m *ConsentV1_Visa) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ConsentV1_Visa) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *ConsentV1_Visa) GetBy() string {
	if m != nil {
		return m.By
	}
	return ""
}

func (m *ConsentV1_Visa) GetIss() string {
	if m != nil {
		return m.Iss
	}
	return ""
}

// Client : remember the consent for this client.
type ConsentV1_Client struct {
	ClientId             string            `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ui                   map[string]string `protobuf:"bytes,3,rep,name=ui,proto3" json:"ui,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ConsentV1_Client) Reset()         { *m = ConsentV1_Client{} }
func (m *ConsentV1_Client) String() string { return proto.CompactTextString(m) }
func (*ConsentV1_Client) ProtoMessage()    {}
func (*ConsentV1_Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb2e176a5b7c192, []int{4, 1}
}

func (m *ConsentV1_Client) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsentV1_Client.Unmarshal(m, b)
}
func (m *ConsentV1_Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsentV1_Client.Marshal(b, m, deterministic)
}
func (m *ConsentV1_Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsentV1_Client.Merge(m, src)
}
func (m *ConsentV1_Client) XXX_Size() int {
	return xxx_messageInfo_ConsentV1_Client.Size(m)
}
func (m *ConsentV1_Client) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsentV1_Client.DiscardUnknown(m)
}

var xxx_messageInfo_ConsentV1_Client proto.InternalMessageInfo

func (m *ConsentV1_Client) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ConsentV1_Client) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConsentV1_Client) GetUi() map[string]string {
	if m != nil {
		return m.Ui
	}
	return nil
}

func init() {
	proto.RegisterEnum("consents.v1.ConsentV1_RequestMatchType", ConsentV1_RequestMatchType_name, ConsentV1_RequestMatchType_value)
	proto.RegisterEnum("consents.v1.ConsentV1_ReleaseType", ConsentV1_ReleaseType_name, ConsentV1_ReleaseType_value)
	proto.RegisterType((*Consent)(nil), "consents.v1.Consent")
	proto.RegisterType((*DeleteConsentRequest)(nil), "consents.v1.DeleteConsentRequest")
	proto.RegisterType((*ListConsentsRequest)(nil), "consents.v1.ListConsentsRequest")
	proto.RegisterType((*ListConsentsResponse)(nil), "consents.v1.ListConsentsResponse")
	proto.RegisterType((*ConsentV1)(nil), "consents.v1.ConsentV1")
	proto.RegisterType((*ConsentV1_Visa)(nil), "consents.v1.ConsentV1.Visa")
	proto.RegisterType((*ConsentV1_Client)(nil), "consents.v1.ConsentV1.Client")
	proto.RegisterMapType((map[string]string)(nil), "consents.v1.ConsentV1.Client.UiEntry")
}

func init() {
	proto.RegisterFile("proto/consents/v1/consents.proto", fileDescriptor_0bb2e176a5b7c192)
}

var fileDescriptor_0bb2e176a5b7c192 = []byte{
	// 1039 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0x0d, 0x29, 0x59, 0x96, 0x46, 0xbe, 0xa8, 0x6b, 0xd7, 0x25, 0xe4, 0xa4, 0x95, 0x85, 0x5e,
	0x94, 0x16, 0x96, 0x62, 0x17, 0x29, 0x8a, 0xf4, 0xc9, 0x17, 0x36, 0x15, 0xe0, 0x2a, 0x86, 0x24,
	0xbb, 0x68, 0x5f, 0x08, 0x9a, 0x1c, 0xdb, 0x0b, 0x53, 0x24, 0xcb, 0x5d, 0x1a, 0x51, 0x02, 0xbf,
	0x04, 0xfd, 0x81, 0xa2, 0x1f, 0x51, 0xf4, 0x7b, 0xfa, 0x0b, 0xfd, 0x90, 0x62, 0x2f, 0xa4, 0x2c,
	0x45, 0xb6, 0x91, 0xb7, 0x9d, 0x73, 0xe6, 0x70, 0x67, 0x67, 0x67, 0x66, 0x09, 0x8d, 0x38, 0x89,
	0x78, 0xd4, 0xf1, 0xa2, 0x90, 0x61, 0xc8, 0x59, 0xe7, 0x7a, 0x27, 0x5f, 0xb7, 0x25, 0x45, 0xaa,
	0xb9, 0x7d, 0xbd, 0x53, 0x7f, 0x7c, 0x11, 0x45, 0x17, 0x01, 0x76, 0xdc, 0x98, 0x76, 0xdc, 0x30,
	0x8c, 0xb8, 0xcb, 0x69, 0x14, 0x6a, 0xd7, 0xfa, 0xa6, 0x66, 0xa5, 0x75, 0x96, 0x9e, 0x77, 0x70,
	0x14, 0xf3, 0xb1, 0x26, 0x3f, 0x9b, 0x25, 0x39, 0x1d, 0x21, 0xe3, 0xee, 0x28, 0x56, 0x0e, 0xcd,
	0x3f, 0x4d, 0x58, 0x3c, 0x50, 0x7b, 0x11, 0x02, 0xc5, 0xd0, 0x1d, 0xa1, 0x65, 0x34, 0x8c, 0x56,
	0xa5, 0x2f, 0xd7, 0x02, 0x4b, 0x19, 0x26, 0x96, 0xa9, 0x30, 0xb1, 0x26, 0x1b, 0x50, 0xf2, 0x02,
	0x8a, 0x21, 0xb7, 0x0a, 0x12, 0xd5, 0x16, 0x59, 0x87, 0x05, 0xca, 0x71, 0xc4, 0xac, 0x62, 0xa3,
	0xd0, 0xaa, 0xf4, 0x95, 0x21, 0xbc, 0x99, 0x17, 0xc5, 0xc8, 0xac, 0x05, 0x09, 0x6b, 0x8b, 0xd4,
	0xa1, 0x9c, 0x20, 0x8b, 0x52, 0x0f, 0x99, 0x55, 0x92, 0x4c, 0x6e, 0x93, 0x1f, 0xa0, 0xea, 0x25,
	0xe8, 0x72, 0x74, 0x44, 0xbc, 0xd6, 0x62, 0xc3, 0x68, 0x55, 0x77, 0xeb, 0x6d, 0x75, 0x98, 0x76,
	0x76, 0x98, 0xf6, 0x30, 0x3b, 0x4c, 0x1f, 0x94, 0xbb, 0x00, 0x84, 0x38, 0x8d, 0xfd, 0x5c, 0x5c,
	0x7e, 0x58, 0xac, 0xdc, 0x05, 0xf0, 0xc2, 0xb4, 0x8c, 0x66, 0x0f, 0xd6, 0x0f, 0x31, 0x40, 0x8e,
	0x3a, 0x31, 0x7d, 0xfc, 0x3d, 0x45, 0xc6, 0xc9, 0x27, 0xb0, 0x28, 0xce, 0xef, 0x50, 0x5f, 0xa7,
	0xa8, 0x24, 0xcc, 0xae, 0x4f, 0x9e, 0x00, 0xe8, 0xfb, 0x12, 0x9c, 0x4a, 0x55, 0x45, 0x23, 0x5d,
	0xbf, 0xf9, 0xce, 0x80, 0xb5, 0x23, 0xca, 0xb8, 0xfe, 0x1c, 0x7b, 0xf0, 0x7b, 0x1b, 0x50, 0x3a,
	0xa7, 0x01, 0xcf, 0xd3, 0xae, 0x2d, 0xb2, 0x09, 0x95, 0xd8, 0xbd, 0x40, 0x87, 0xd1, 0x37, 0x28,
	0x73, 0xbf, 0xd0, 0x2f, 0x0b, 0x60, 0x40, 0xdf, 0xa0, 0x08, 0x42, 0x92, 0x3c, 0xba, 0xc2, 0xd0,
	0x2a, 0xaa, 0x20, 0x04, 0x32, 0x14, 0x40, 0x33, 0x86, 0xf5, 0xe9, 0x18, 0x58, 0x2c, 0x96, 0xe4,
	0x19, 0x94, 0xb3, 0x5a, 0xb3, 0x8c, 0x46, 0xa1, 0x55, 0xdd, 0x5d, 0x6f, 0xdf, 0x2a, 0xbe, 0x76,
	0x96, 0x83, 0xdc, 0x8b, 0x7c, 0x09, 0xab, 0x21, 0xbe, 0xe6, 0xce, 0xad, 0xdd, 0x54, 0x98, 0xcb,
	0x02, 0x3e, 0xce, 0x77, 0xfc, 0xa7, 0x02, 0x15, 0xad, 0x3e, 0xdd, 0x99, 0x5b, 0x5c, 0xcf, 0xf3,
	0x42, 0x32, 0xe5, 0x25, 0x3d, 0x99, 0xb7, 0xf3, 0xe9, 0x4e, 0xfb, 0x40, 0x3a, 0xe5, 0x75, 0x36,
	0x53, 0x1d, 0x85, 0x0f, 0xad, 0x0e, 0x7c, 0x1d, 0xd3, 0x44, 0x8b, 0x8b, 0x0f, 0x8b, 0x95, 0xbb,
	0x14, 0x9f, 0x00, 0x49, 0xd4, 0xe5, 0x39, 0x23, 0x97, 0x7b, 0x97, 0x0e, 0x1f, 0xc7, 0x68, 0x2d,
	0x34, 0x8c, 0xd6, 0xca, 0xee, 0x57, 0x77, 0x04, 0xaf, 0x6f, 0xfb, 0x67, 0xe1, 0x3f, 0x1c, 0xc7,
	0xd8, 0xaf, 0x25, 0x33, 0x08, 0xe9, 0xc0, 0x9a, 0xc6, 0xd0, 0x77, 0x64, 0x13, 0x24, 0x93, 0xae,
	0x20, 0x39, 0xd5, 0xcf, 0x18, 0xf2, 0x14, 0x6a, 0x13, 0x81, 0xee, 0xae, 0x45, 0xe9, 0xbd, 0x9a,
	0xe3, 0x03, 0xd5, 0x66, 0x36, 0x2c, 0x25, 0x18, 0xa0, 0xcb, 0x50, 0x05, 0x5b, 0x96, 0xc1, 0x36,
	0xef, 0x0c, 0x56, 0xba, 0xca, 0x38, 0xab, 0xc9, 0xc4, 0x20, 0xfb, 0xb0, 0xc2, 0x30, 0x40, 0x4f,
	0x6c, 0x78, 0x4d, 0x99, 0xcb, 0xac, 0x8a, 0x2c, 0x96, 0xcd, 0x3b, 0x3e, 0x74, 0x4a, 0x99, 0xdb,
	0x5f, 0xce, 0x24, 0xc2, 0x62, 0xe4, 0x19, 0xac, 0x67, 0xa1, 0xc4, 0x49, 0x74, 0x4e, 0x03, 0x74,
	0x64, 0x49, 0x40, 0xc3, 0x68, 0x95, 0xc5, 0x39, 0x25, 0x77, 0xac, 0xa8, 0x9e, 0x28, 0x90, 0x5d,
	0xf8, 0x78, 0x56, 0x81, 0x23, 0x97, 0x06, 0x56, 0x55, 0x4a, 0xd6, 0xa6, 0x25, 0xb6, 0xa0, 0xe6,
	0x69, 0x22, 0x7e, 0x89, 0x89, 0xb5, 0x34, 0x4f, 0xf3, 0x4a, 0x50, 0xb7, 0x35, 0xae, 0xe7, 0x45,
	0x69, 0xc8, 0x1d, 0xd7, 0x1f, 0xd1, 0xd0, 0x5a, 0x9e, 0xd2, 0xec, 0x29, 0x6e, 0x4f, 0x50, 0x64,
	0x6b, 0x92, 0xd8, 0x80, 0x86, 0x57, 0xd6, 0x8a, 0x74, 0xcd, 0x92, 0x76, 0x44, 0xc3, 0x2b, 0xb2,
	0x0d, 0xd9, 0xa1, 0x1c, 0xea, 0x63, 0xc8, 0x29, 0xa7, 0xc8, 0xac, 0x55, 0xe9, 0xf8, 0x91, 0x66,
	0xba, 0x39, 0x51, 0x1f, 0x42, 0x51, 0x24, 0x4a, 0xb4, 0x8a, 0xbc, 0x2a, 0xdd, 0x2a, 0x62, 0x2d,
	0xa7, 0xa8, 0xbc, 0xfc, 0x6c, 0x24, 0x28, 0x8b, 0xac, 0x80, 0x79, 0x36, 0xd6, 0x73, 0xd8, 0x3c,
	0x1b, 0x93, 0x1a, 0x14, 0x28, 0x63, 0xba, 0xfd, 0xc5, 0xb2, 0xfe, 0xb7, 0x01, 0x25, 0xd5, 0x40,
	0x62, 0x7e, 0xa8, 0x16, 0x9a, 0x8c, 0x9c, 0xb2, 0x02, 0xba, 0x7e, 0xde, 0xa0, 0xe6, 0x54, 0x83,
	0x9a, 0x29, 0xb5, 0x0a, 0xf2, 0xa6, 0xbf, 0xb8, 0xb7, 0x39, 0xdb, 0x27, 0xd4, 0x0e, 0x79, 0x32,
	0xee, 0x9b, 0x29, 0xad, 0x3f, 0x87, 0x45, 0x6d, 0x8a, 0x78, 0xae, 0x70, 0xac, 0x37, 0x13, 0x4b,
	0xf1, 0x4a, 0x5c, 0xbb, 0x41, 0x9a, 0x6d, 0xa4, 0x8c, 0x17, 0xe6, 0xf7, 0x46, 0xf3, 0x3b, 0xa8,
	0xcd, 0x36, 0x0b, 0x29, 0x43, 0xb1, 0xf7, 0xaa, 0x67, 0xd7, 0x1e, 0x11, 0x80, 0xd2, 0xe0, 0x64,
	0x7f, 0x60, 0x0f, 0x6b, 0x06, 0x59, 0x82, 0xf2, 0x5e, 0xef, 0xd7, 0xe1, 0x4f, 0xdd, 0xde, 0xcb,
	0x9a, 0xd9, 0xdc, 0x83, 0xea, 0xad, 0xba, 0x25, 0xab, 0x50, 0x3d, 0xe9, 0x0d, 0x8e, 0xed, 0x83,
	0xee, 0x8f, 0x5d, 0xfb, 0xb0, 0xf6, 0x48, 0x78, 0x0f, 0xec, 0x23, 0xfb, 0x60, 0x68, 0x1f, 0xd6,
	0x0c, 0xb2, 0x06, 0xab, 0x99, 0xd6, 0xe9, 0xd9, 0xf6, 0xa1, 0x7d, 0x58, 0x33, 0x77, 0xff, 0x30,
	0xa1, 0x9c, 0x8d, 0x46, 0x72, 0x03, 0xcb, 0x53, 0xf3, 0x9f, 0x6c, 0x4d, 0x1d, 0x7d, 0xde, 0xdb,
	0x50, 0xdf, 0x78, 0x6f, 0x82, 0xd8, 0xe2, 0x19, 0x6e, 0xee, 0xbc, 0xfb, 0xf7, 0xbf, 0xbf, 0xcc,
	0x6f, 0xbe, 0x7e, 0x2a, 0x1e, 0x79, 0x31, 0xde, 0x59, 0xe7, 0xad, 0x1e, 0xfa, 0x37, 0x93, 0x1f,
	0x80, 0xb7, 0x93, 0xe7, 0xe3, 0x86, 0x8c, 0x61, 0xe9, 0xf6, 0xa4, 0x26, 0x8d, 0xa9, 0xdd, 0xe7,
	0x3c, 0x24, 0xf5, 0xad, 0x7b, 0x3c, 0xd4, 0x98, 0x6f, 0x7e, 0x2e, 0xe3, 0xf8, 0x94, 0x3c, 0xbe,
	0x2f, 0x8e, 0xfd, 0x5f, 0x7e, 0x3b, 0xb9, 0xa0, 0xfc, 0x32, 0x3d, 0x6b, 0x7b, 0xd1, 0xa8, 0xf3,
	0x52, 0x9e, 0xe8, 0x20, 0x88, 0x52, 0xff, 0x38, 0x70, 0xf9, 0x79, 0x94, 0x8c, 0x3a, 0x97, 0xe8,
	0x06, 0xfc, 0xd2, 0x73, 0x13, 0xdc, 0x3e, 0x47, 0x1f, 0x13, 0x97, 0xa3, 0xbf, 0xed, 0x7a, 0x1e,
	0x32, 0xb6, 0xcd, 0x30, 0xb9, 0xa6, 0x1e, 0xb2, 0xce, 0x7b, 0xbf, 0x37, 0x67, 0x25, 0x09, 0x7d,
	0xfb, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xc3, 0x71, 0xef, 0xfa, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConsentsClient is the client API for Consents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsentsClient interface {
	// Deletes the specified Remembered Consent.
	DeleteConsent(ctx context.Context, in *DeleteConsentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Lists the Remembered Consents.
	ListConsents(ctx context.Context, in *ListConsentsRequest, opts ...grpc.CallOption) (*ListConsentsResponse, error)
}

type consentsClient struct {
	cc grpc.ClientConnInterface
}

func NewConsentsClient(cc grpc.ClientConnInterface) ConsentsClient {
	return &consentsClient{cc}
}

func (c *consentsClient) DeleteConsent(ctx context.Context, in *DeleteConsentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/consents.v1.Consents/DeleteConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consentsClient) ListConsents(ctx context.Context, in *ListConsentsRequest, opts ...grpc.CallOption) (*ListConsentsResponse, error) {
	out := new(ListConsentsResponse)
	err := c.cc.Invoke(ctx, "/consents.v1.Consents/ListConsents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsentsServer is the server API for Consents service.
type ConsentsServer interface {
	// Deletes the specified Remembered Consent.
	DeleteConsent(context.Context, *DeleteConsentRequest) (*empty.Empty, error)
	// Lists the Remembered Consents.
	ListConsents(context.Context, *ListConsentsRequest) (*ListConsentsResponse, error)
}

// UnimplementedConsentsServer can be embedded to have forward compatible implementations.
type UnimplementedConsentsServer struct {
}

func (*UnimplementedConsentsServer) DeleteConsent(ctx context.Context, req *DeleteConsentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConsent not implemented")
}
func (*UnimplementedConsentsServer) ListConsents(ctx context.Context, req *ListConsentsRequest) (*ListConsentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsents not implemented")
}

func RegisterConsentsServer(s *grpc.Server, srv ConsentsServer) {
	s.RegisterService(&_Consents_serviceDesc, srv)
}

func _Consents_DeleteConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsentsServer).DeleteConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consents.v1.Consents/DeleteConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsentsServer).DeleteConsent(ctx, req.(*DeleteConsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consents_ListConsents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsentsServer).ListConsents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consents.v1.Consents/ListConsents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsentsServer).ListConsents(ctx, req.(*ListConsentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Consents_serviceDesc = grpc.ServiceDesc{
	ServiceName: "consents.v1.Consents",
	HandlerType: (*ConsentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteConsent",
			Handler:    _Consents_DeleteConsent_Handler,
		},
		{
			MethodName: "ListConsents",
			Handler:    _Consents_ListConsents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/consents/v1/consents.proto",
}
