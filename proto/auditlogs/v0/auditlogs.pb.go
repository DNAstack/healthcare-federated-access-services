// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/auditlogs/v0/auditlogs.proto

// Package v1 provides protocol buffer for AuditLogs API.
package v1

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Decision is the result of an auth check.
type Decision int32

const (
	Decision_UNSPECIFIED Decision = 0
	Decision_PASS        Decision = 1
	Decision_FAIL        Decision = 2
)

var Decision_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "PASS",
	2: "FAIL",
}

var Decision_value = map[string]int32{
	"UNSPECIFIED": 0,
	"PASS":        1,
	"FAIL":        2,
}

func (x Decision) String() string {
	return proto.EnumName(Decision_name, int32(x))
}

func (Decision) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1be582115e76de27, []int{0}
}

// An AuditLog records request for access. They contain the following
// information:
// - Where:    the name of the service that made the decision.
// - What:     the requested Action (e.g. read/write/...) and
//             the Resource (e.g. GCS bucket, a resource at an endpoint).
// - When:     the time the decision was made.
// - Who:      the identity and authentication information for the requester.
// - Decision: the authorization decision, and the reason for it.
// - Metadata: the request, response, status code, tracing id, etc.
type AuditLog struct {
	// Name of the audit log.
	// Format: `users/{user_id}/logs/{log_id}`.
	Name                 string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AccessLog            *AccessLog `protobuf:"bytes,2,opt,name=access_log,json=accessLog,proto3" json:"access_log,omitempty"`
	PolicyLog            *PolicyLog `protobuf:"bytes,3,opt,name=policy_log,json=policyLog,proto3" json:"policy_log,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AuditLog) Reset()         { *m = AuditLog{} }
func (m *AuditLog) String() string { return proto.CompactTextString(m) }
func (*AuditLog) ProtoMessage()    {}
func (*AuditLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1be582115e76de27, []int{0}
}

func (m *AuditLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuditLog.Unmarshal(m, b)
}
func (m *AuditLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuditLog.Marshal(b, m, deterministic)
}
func (m *AuditLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditLog.Merge(m, src)
}
func (m *AuditLog) XXX_Size() int {
	return xxx_messageInfo_AuditLog.Size(m)
}
func (m *AuditLog) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditLog.DiscardUnknown(m)
}

var xxx_messageInfo_AuditLog proto.InternalMessageInfo

func (m *AuditLog) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AuditLog) GetAccessLog() *AccessLog {
	if m != nil {
		return m.AccessLog
	}
	return nil
}

func (m *AuditLog) GetPolicyLog() *PolicyLog {
	if m != nil {
		return m.PolicyLog
	}
	return nil
}

// AccessLog is the audit log for auth checks for requests at endpoints.
type AccessLog struct {
	// ServiceName is the name of the service which made the decision.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// ServiceType is the type of the service which made the decision.
	ServiceType string `protobuf:"bytes,2,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	// TokenID is the id of the token, maybe "jti".
	TokenId string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// TokenSubject is the "sub" of the token.
	TokenSubject string `protobuf:"bytes,4,opt,name=token_subject,json=tokenSubject,proto3" json:"token_subject,omitempty"`
	// TokenIssuer is the iss of the token.
	TokenIssuer string `protobuf:"bytes,5,opt,name=token_issuer,json=tokenIssuer,proto3" json:"token_issuer,omitempty"`
	// Decision is the PassAuthCheck if the request passes the auth check.
	Decision Decision `protobuf:"varint,6,opt,name=decision,proto3,enum=AuditLogs.v1.Decision" json:"decision,omitempty"`
	// ErrorType of deny.
	// TODO: consider making this an enum.
	ErrorType string `protobuf:"bytes,7,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	// The reason for the deny decision.
	Reason string `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
	// Time at which the decision was made.
	Time *timestamp.Timestamp `protobuf:"bytes,9,opt,name=time,proto3" json:"time,omitempty"`
	// MethodName is the name of the service method or operation.
	MethodName string `protobuf:"bytes,10,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	// ResourceName is the name of the resource that was target of the operation.
	ResourceName string `protobuf:"bytes,11,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// TracingID is the id of request from proxies.
	TracingId string `protobuf:"bytes,12,opt,name=tracing_id,json=tracingId,proto3" json:"tracing_id,omitempty"`
	// Requester's IP.
	CallerIp string `protobuf:"bytes,13,opt,name=caller_ip,json=callerIp,proto3" json:"caller_ip,omitempty"`
	// HTTP Response Code.
	HttpResponseCode int64 `protobuf:"varint,14,opt,name=http_response_code,json=httpResponseCode,proto3" json:"http_response_code,omitempty"`
	// HTTP Request.
	HttpRequest          *_struct.Struct `protobuf:"bytes,15,opt,name=http_request,json=httpRequest,proto3" json:"http_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AccessLog) Reset()         { *m = AccessLog{} }
func (m *AccessLog) String() string { return proto.CompactTextString(m) }
func (*AccessLog) ProtoMessage()    {}
func (*AccessLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1be582115e76de27, []int{1}
}

func (m *AccessLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccessLog.Unmarshal(m, b)
}
func (m *AccessLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccessLog.Marshal(b, m, deterministic)
}
func (m *AccessLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessLog.Merge(m, src)
}
func (m *AccessLog) XXX_Size() int {
	return xxx_messageInfo_AccessLog.Size(m)
}
func (m *AccessLog) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessLog.DiscardUnknown(m)
}

var xxx_messageInfo_AccessLog proto.InternalMessageInfo

func (m *AccessLog) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *AccessLog) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *AccessLog) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *AccessLog) GetTokenSubject() string {
	if m != nil {
		return m.TokenSubject
	}
	return ""
}

func (m *AccessLog) GetTokenIssuer() string {
	if m != nil {
		return m.TokenIssuer
	}
	return ""
}

func (m *AccessLog) GetDecision() Decision {
	if m != nil {
		return m.Decision
	}
	return Decision_UNSPECIFIED
}

func (m *AccessLog) GetErrorType() string {
	if m != nil {
		return m.ErrorType
	}
	return ""
}

func (m *AccessLog) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *AccessLog) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *AccessLog) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *AccessLog) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *AccessLog) GetTracingId() string {
	if m != nil {
		return m.TracingId
	}
	return ""
}

func (m *AccessLog) GetCallerIp() string {
	if m != nil {
		return m.CallerIp
	}
	return ""
}

func (m *AccessLog) GetHttpResponseCode() int64 {
	if m != nil {
		return m.HttpResponseCode
	}
	return 0
}

func (m *AccessLog) GetHttpRequest() *_struct.Struct {
	if m != nil {
		return m.HttpRequest
	}
	return nil
}

// PolicyLog is the audit log for dataset access decision.
type PolicyLog struct {
	// ServiceName is the name of the service which made the decision.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// ServiceType is the type of the service which made the decision.
	ServiceType string `protobuf:"bytes,2,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	// TokenID is the id of the token, maybe "jti".
	TokenId string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// TokenSubject is the "sub" of the token.
	TokenSubject string `protobuf:"bytes,4,opt,name=token_subject,json=tokenSubject,proto3" json:"token_subject,omitempty"`
	// TokenIssuer is the iss of the token.
	TokenIssuer string `protobuf:"bytes,5,opt,name=token_issuer,json=tokenIssuer,proto3" json:"token_issuer,omitempty"`
	// CartId of the request.
	CartId string `protobuf:"bytes,12,opt,name=cart_id,json=cartId,proto3" json:"cart_id,omitempty"`
	// ConfigRevision that the request using.
	ConfigRevision string `protobuf:"bytes,13,opt,name=config_revision,json=configRevision,proto3" json:"config_revision,omitempty"`
	// Decission if the request pass the auth checker.
	Decision Decision `protobuf:"varint,6,opt,name=decision,proto3,enum=AuditLogs.v1.Decision" json:"decision,omitempty"`
	// ErrorType of deny.
	// TODO: consider making this an enum.
	ErrorType string `protobuf:"bytes,7,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	// The reason for the deny decision.
	Reason string `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
	// Time at which the decision was made.
	Time *timestamp.Timestamp `protobuf:"bytes,9,opt,name=time,proto3" json:"time,omitempty"`
	// ResourceName identifies the dataset to which the access was requested.
	ResourceName string `protobuf:"bytes,10,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// TTL that user requested for the access.
	Ttl                  *duration.Duration `protobuf:"bytes,11,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PolicyLog) Reset()         { *m = PolicyLog{} }
func (m *PolicyLog) String() string { return proto.CompactTextString(m) }
func (*PolicyLog) ProtoMessage()    {}
func (*PolicyLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1be582115e76de27, []int{2}
}

func (m *PolicyLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyLog.Unmarshal(m, b)
}
func (m *PolicyLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyLog.Marshal(b, m, deterministic)
}
func (m *PolicyLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyLog.Merge(m, src)
}
func (m *PolicyLog) XXX_Size() int {
	return xxx_messageInfo_PolicyLog.Size(m)
}
func (m *PolicyLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyLog.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyLog proto.InternalMessageInfo

func (m *PolicyLog) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *PolicyLog) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *PolicyLog) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *PolicyLog) GetTokenSubject() string {
	if m != nil {
		return m.TokenSubject
	}
	return ""
}

func (m *PolicyLog) GetTokenIssuer() string {
	if m != nil {
		return m.TokenIssuer
	}
	return ""
}

func (m *PolicyLog) GetCartId() string {
	if m != nil {
		return m.CartId
	}
	return ""
}

func (m *PolicyLog) GetConfigRevision() string {
	if m != nil {
		return m.ConfigRevision
	}
	return ""
}

func (m *PolicyLog) GetDecision() Decision {
	if m != nil {
		return m.Decision
	}
	return Decision_UNSPECIFIED
}

func (m *PolicyLog) GetErrorType() string {
	if m != nil {
		return m.ErrorType
	}
	return ""
}

func (m *PolicyLog) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *PolicyLog) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *PolicyLog) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *PolicyLog) GetTtl() *duration.Duration {
	if m != nil {
		return m.Ttl
	}
	return nil
}

type ListAuditLogsRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Filter               string   `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	PageSize             int32    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken            string   `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAuditLogsRequest) Reset()         { *m = ListAuditLogsRequest{} }
func (m *ListAuditLogsRequest) String() string { return proto.CompactTextString(m) }
func (*ListAuditLogsRequest) ProtoMessage()    {}
func (*ListAuditLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1be582115e76de27, []int{3}
}

func (m *ListAuditLogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAuditLogsRequest.Unmarshal(m, b)
}
func (m *ListAuditLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAuditLogsRequest.Marshal(b, m, deterministic)
}
func (m *ListAuditLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAuditLogsRequest.Merge(m, src)
}
func (m *ListAuditLogsRequest) XXX_Size() int {
	return xxx_messageInfo_ListAuditLogsRequest.Size(m)
}
func (m *ListAuditLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAuditLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAuditLogsRequest proto.InternalMessageInfo

func (m *ListAuditLogsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListAuditLogsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListAuditLogsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListAuditLogsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListAuditLogsResponse struct {
	AuditLogs            []*AuditLog `protobuf:"bytes,1,rep,name=audit_logs,json=auditLogs,proto3" json:"audit_logs,omitempty"`
	NextPageToken        string      `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListAuditLogsResponse) Reset()         { *m = ListAuditLogsResponse{} }
func (m *ListAuditLogsResponse) String() string { return proto.CompactTextString(m) }
func (*ListAuditLogsResponse) ProtoMessage()    {}
func (*ListAuditLogsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1be582115e76de27, []int{4}
}

func (m *ListAuditLogsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAuditLogsResponse.Unmarshal(m, b)
}
func (m *ListAuditLogsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAuditLogsResponse.Marshal(b, m, deterministic)
}
func (m *ListAuditLogsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAuditLogsResponse.Merge(m, src)
}
func (m *ListAuditLogsResponse) XXX_Size() int {
	return xxx_messageInfo_ListAuditLogsResponse.Size(m)
}
func (m *ListAuditLogsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAuditLogsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAuditLogsResponse proto.InternalMessageInfo

func (m *ListAuditLogsResponse) GetAuditLogs() []*AuditLog {
	if m != nil {
		return m.AuditLogs
	}
	return nil
}

func (m *ListAuditLogsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func init() {
	proto.RegisterEnum("AuditLogs.v1.Decision", Decision_name, Decision_value)
	proto.RegisterType((*AuditLog)(nil), "AuditLogs.v1.AuditLog")
	proto.RegisterType((*AccessLog)(nil), "AuditLogs.v1.AccessLog")
	proto.RegisterType((*PolicyLog)(nil), "AuditLogs.v1.PolicyLog")
	proto.RegisterType((*ListAuditLogsRequest)(nil), "AuditLogs.v1.ListAuditLogsRequest")
	proto.RegisterType((*ListAuditLogsResponse)(nil), "AuditLogs.v1.ListAuditLogsResponse")
}

func init() {
	proto.RegisterFile("proto/auditlogs/v0/auditlogs.proto", fileDescriptor_1be582115e76de27)
}

var fileDescriptor_1be582115e76de27 = []byte{
	// 816 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0x41, 0x6f, 0x23, 0x35,
	0x14, 0x66, 0x9a, 0x6c, 0x9a, 0x79, 0x49, 0x9a, 0xca, 0x62, 0x77, 0x67, 0xcb, 0x2e, 0x1b, 0x52,
	0x09, 0x22, 0xa0, 0x19, 0x1a, 0x04, 0x07, 0x6e, 0xa5, 0xdd, 0x45, 0x91, 0xaa, 0x55, 0x34, 0xe9,
	0x5e, 0xb8, 0x8c, 0xdc, 0x19, 0x67, 0x62, 0x98, 0x8c, 0x07, 0xdb, 0x13, 0xd1, 0x15, 0x27, 0xb8,
	0x73, 0xe1, 0xe7, 0xf0, 0x33, 0xf8, 0x09, 0xf0, 0x43, 0x90, 0x9f, 0x3d, 0x69, 0x9a, 0xad, 0x38,
	0xb3, 0x37, 0xbf, 0xef, 0xfb, 0x6c, 0x3f, 0xbf, 0xef, 0x4b, 0x06, 0x86, 0xa5, 0x14, 0x5a, 0x84,
	0xb4, 0x4a, 0xb9, 0xce, 0x45, 0xa6, 0xc2, 0xf5, 0x17, 0xb7, 0xc5, 0x18, 0x49, 0xd2, 0x3d, 0x33,
	0xc0, 0xa5, 0x01, 0xd6, 0xa7, 0x47, 0x4f, 0x33, 0x21, 0xb2, 0x9c, 0x85, 0xb4, 0xe4, 0x21, 0x2d,
	0x0a, 0xa1, 0xa9, 0xe6, 0xa2, 0x70, 0xda, 0xa3, 0x0f, 0x1d, 0x8b, 0xd5, 0x75, 0xb5, 0x08, 0xd3,
	0x4a, 0xa2, 0xc0, 0xf1, 0x4f, 0x77, 0x79, 0xa5, 0x65, 0x95, 0x68, 0xc7, 0x3e, 0xdf, 0x65, 0x35,
	0x5f, 0x31, 0xa5, 0xe9, 0xaa, 0xb4, 0x82, 0xe1, 0xef, 0x1e, 0xb4, 0xeb, 0x6e, 0x08, 0x81, 0x66,
	0x41, 0x57, 0x2c, 0xf0, 0x06, 0xde, 0xc8, 0x8f, 0x70, 0x4d, 0xbe, 0x06, 0xa0, 0x49, 0xc2, 0x94,
	0x8a, 0x73, 0x91, 0x05, 0x7b, 0x03, 0x6f, 0xd4, 0x99, 0x3c, 0x1e, 0x6f, 0x3f, 0x60, 0x7c, 0x86,
	0xfc, 0xa5, 0xc8, 0x22, 0x9f, 0xd6, 0x4b, 0xb3, 0xaf, 0x14, 0x39, 0x4f, 0x6e, 0x70, 0x5f, 0xe3,
	0xbe, 0x7d, 0x33, 0xe4, 0x71, 0x5f, 0x59, 0x2f, 0x87, 0x7f, 0x36, 0xc1, 0xdf, 0x1c, 0x48, 0x3e,
	0x82, 0xae, 0x62, 0x72, 0xcd, 0x13, 0x16, 0x6f, 0x75, 0xd6, 0x71, 0xd8, 0x2b, 0xd3, 0xe0, 0x96,
	0x44, 0xdf, 0x94, 0x0c, 0x5b, 0xbc, 0x95, 0x5c, 0xdd, 0x94, 0x8c, 0x3c, 0x81, 0xb6, 0x16, 0x3f,
	0xb2, 0x22, 0xe6, 0x29, 0x76, 0xe2, 0x47, 0xfb, 0x58, 0x4f, 0x53, 0x72, 0x0c, 0x3d, 0x4b, 0xa9,
	0xea, 0xfa, 0x07, 0x96, 0xe8, 0xa0, 0x89, 0x7c, 0x17, 0xc1, 0xb9, 0xc5, 0xcc, 0x15, 0x6e, 0xbf,
	0x52, 0x15, 0x93, 0xc1, 0x03, 0x7b, 0x85, 0x3d, 0x03, 0x21, 0x32, 0x81, 0x76, 0xca, 0x12, 0xae,
	0xb8, 0x28, 0x82, 0xd6, 0xc0, 0x1b, 0x1d, 0x4c, 0x1e, 0xdd, 0x7d, 0xec, 0x85, 0x63, 0xa3, 0x8d,
	0x8e, 0x3c, 0x03, 0x60, 0x52, 0x0a, 0x69, 0xfb, 0xde, 0xc7, 0x43, 0x7d, 0x44, 0xb0, 0xeb, 0x47,
	0xd0, 0x92, 0x8c, 0x2a, 0x51, 0x04, 0x6d, 0xa4, 0x5c, 0x45, 0xc6, 0xd0, 0x34, 0x2e, 0x06, 0x3e,
	0xce, 0xf4, 0x68, 0x6c, 0x2d, 0x1e, 0xd7, 0x16, 0x8f, 0xaf, 0x6a, 0x8b, 0x23, 0xd4, 0x91, 0xe7,
	0xd0, 0x59, 0x31, 0xbd, 0x14, 0xa9, 0x1d, 0x21, 0xe0, 0x61, 0x60, 0x21, 0x9c, 0xe0, 0x31, 0xf4,
	0x24, 0x53, 0xa2, 0x92, 0xf5, 0x94, 0x3b, 0x76, 0x06, 0x35, 0x88, 0xa2, 0x67, 0x00, 0x5a, 0xd2,
	0x84, 0x17, 0x99, 0x99, 0x62, 0xd7, 0x36, 0xeb, 0x90, 0x69, 0x4a, 0x3e, 0x00, 0x3f, 0xa1, 0x79,
	0xce, 0x64, 0xcc, 0xcb, 0xa0, 0x87, 0x6c, 0xdb, 0x02, 0xd3, 0x92, 0x7c, 0x0e, 0x64, 0xa9, 0x75,
	0x19, 0x4b, 0xa6, 0x4a, 0x51, 0x28, 0x16, 0x27, 0x22, 0x65, 0xc1, 0xc1, 0xc0, 0x1b, 0x35, 0xa2,
	0x43, 0xc3, 0x44, 0x8e, 0x38, 0x17, 0x29, 0x23, 0xdf, 0x40, 0xd7, 0xa9, 0x7f, 0xaa, 0x98, 0xd2,
	0x41, 0xdf, 0x65, 0x67, 0xf7, 0x9d, 0x73, 0x0c, 0x7a, 0xd4, 0xb1, 0x07, 0xa0, 0x76, 0xf8, 0x77,
	0x03, 0xfc, 0x4d, 0xac, 0xde, 0x9d, 0xf4, 0x3c, 0x86, 0xfd, 0x84, 0x4a, 0x7d, 0x3b, 0xd9, 0x96,
	0x29, 0xa7, 0x29, 0xf9, 0x04, 0xfa, 0x89, 0x28, 0x16, 0x3c, 0x8b, 0x25, 0x5b, 0xdb, 0x74, 0xd9,
	0xe1, 0x1e, 0x58, 0x38, 0x72, 0xe8, 0xff, 0x39, 0x7f, 0x6f, 0xc5, 0x0b, 0xee, 0x89, 0xd7, 0x67,
	0xd0, 0xd0, 0x3a, 0xc7, 0xe4, 0x75, 0x26, 0x4f, 0xde, 0x3a, 0xf3, 0xc2, 0xfd, 0xe9, 0x45, 0x46,
	0x35, 0xfc, 0xcd, 0x83, 0xf7, 0x2f, 0xb9, 0xd2, 0x9b, 0x07, 0x3a, 0xfb, 0xcd, 0x1c, 0x2b, 0x65,
	0x32, 0x98, 0x3a, 0xaf, 0x5b, 0xa6, 0x9c, 0xa6, 0xe6, 0x2d, 0x0b, 0x9e, 0x6b, 0x26, 0x9d, 0xc1,
	0xae, 0x32, 0xb1, 0x2d, 0x69, 0xc6, 0x62, 0xc5, 0xdf, 0x30, 0x34, 0xf7, 0x41, 0xd4, 0x36, 0xc0,
	0x9c, 0xbf, 0xc1, 0xc8, 0x23, 0x89, 0x4e, 0x39, 0x6b, 0x51, 0x7e, 0x65, 0x80, 0xe1, 0x1a, 0x1e,
	0xee, 0x34, 0x61, 0x43, 0x4c, 0xbe, 0x02, 0xc0, 0x7f, 0x7c, 0xf3, 0xcf, 0xa7, 0x02, 0x6f, 0xd0,
	0x18, 0x75, 0x76, 0xdd, 0xa8, 0x8b, 0xc8, 0xa7, 0x35, 0x4c, 0x3e, 0x86, 0x7e, 0xc1, 0x7e, 0xd6,
	0xf1, 0xd6, 0x9d, 0xb6, 0xd9, 0x9e, 0x81, 0x67, 0xf5, 0xbd, 0x9f, 0x86, 0xd0, 0xae, 0xcd, 0x24,
	0x7d, 0xe8, 0xbc, 0x7e, 0x35, 0x9f, 0xbd, 0x38, 0x9f, 0xbe, 0x9c, 0xbe, 0xb8, 0x38, 0x7c, 0x8f,
	0xb4, 0xa1, 0x39, 0x3b, 0x9b, 0xcf, 0x0f, 0x3d, 0xb3, 0x7a, 0x79, 0x36, 0xbd, 0x3c, 0xdc, 0x9b,
	0xfc, 0x02, 0xfe, 0xe6, 0x72, 0x22, 0xa0, 0x77, 0xa7, 0x6b, 0x32, 0xbc, 0xdb, 0xd9, 0x7d, 0x73,
	0x3d, 0x3a, 0xfe, 0x4f, 0x8d, 0x7d, 0xf6, 0xf0, 0xe1, 0xaf, 0x7f, 0xfd, 0xf3, 0xc7, 0x5e, 0x9f,
	0xf4, 0xc2, 0xf5, 0xe9, 0xed, 0x27, 0xef, 0xdb, 0xd7, 0xdf, 0xcf, 0x33, 0xae, 0x97, 0xd5, 0xf5,
	0x38, 0x11, 0xab, 0xf0, 0x3b, 0x34, 0xf6, 0x3c, 0x17, 0x55, 0x3a, 0xcb, 0xa9, 0x5e, 0x08, 0xb9,
	0x0a, 0x97, 0x8c, 0xe6, 0x7a, 0x99, 0x50, 0xc9, 0x4e, 0x16, 0x2c, 0x65, 0x92, 0x6a, 0x96, 0x9e,
	0xd8, 0x2f, 0xc9, 0x89, 0xfb, 0x21, 0xaa, 0x70, 0xeb, 0xb3, 0xaa, 0xc2, 0xf5, 0xe9, 0x75, 0x0b,
	0x81, 0x2f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x13, 0xbb, 0x4b, 0x2f, 0x70, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuditLogsClient is the client API for AuditLogs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuditLogsClient interface {
	// Lists the AuditLogs Logs.
	ListAuditLogs(ctx context.Context, in *ListAuditLogsRequest, opts ...grpc.CallOption) (*ListAuditLogsResponse, error)
}

type auditLogsClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditLogsClient(cc grpc.ClientConnInterface) AuditLogsClient {
	return &auditLogsClient{cc}
}

func (c *auditLogsClient) ListAuditLogs(ctx context.Context, in *ListAuditLogsRequest, opts ...grpc.CallOption) (*ListAuditLogsResponse, error) {
	out := new(ListAuditLogsResponse)
	err := c.cc.Invoke(ctx, "/AuditLogs.v1.AuditLogs/ListAuditLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditLogsServer is the server API for AuditLogs service.
type AuditLogsServer interface {
	// Lists the AuditLogs Logs.
	ListAuditLogs(context.Context, *ListAuditLogsRequest) (*ListAuditLogsResponse, error)
}

// UnimplementedAuditLogsServer can be embedded to have forward compatible implementations.
type UnimplementedAuditLogsServer struct {
}

func (*UnimplementedAuditLogsServer) ListAuditLogs(ctx context.Context, req *ListAuditLogsRequest) (*ListAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditLogs not implemented")
}

func RegisterAuditLogsServer(s *grpc.Server, srv AuditLogsServer) {
	s.RegisterService(&_AuditLogs_serviceDesc, srv)
}

func _AuditLogs_ListAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditLogsServer).ListAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuditLogs.v1.AuditLogs/ListAuditLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditLogsServer).ListAuditLogs(ctx, req.(*ListAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuditLogs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "AuditLogs.v1.AuditLogs",
	HandlerType: (*AuditLogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAuditLogs",
			Handler:    _AuditLogs_ListAuditLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auditlogs/v0/auditlogs.proto",
}
