// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/scim/v2/groups.proto

package v2

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// SCIM representation of a 'Group' as per
// https://tools.ietf.org/html/rfc7643#section-4.2
type Group struct {
	// The schemas attribute is an array of Strings which allows introspection of
	// the supported schema version for a SCIM representation as well any schema
	// extensions supported by that representation. Each String value must be a
	// unique URI. This specification defines URIs for User, Group, and a standard
	// "enterprise" extension. All representations of SCIM schema MUST include a
	// non-zero value array with value(s) of the URIs supported by that
	// representation. Duplicate values MUST NOT be included. Value order is not
	// specified and MUST not impact behavior. REQUIRED.
	Schemas []string `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
	// Unique identifier for the SCIM Resource as defined by the Service Provider.
	// This is returned when the resource is created.
	// Each representation of the Resource MUST include a non-empty id value. This
	// identifier MUST be unique across the Service Provider's entire set of
	// Resources. It MUST be a stable, non-reassignable identifier that does not
	// change when the same Resource is returned in subsequent requests. The value
	// of the id attribute is always issued by the Service Provider and MUST never
	// be specified by the Service Consumer. bulkId: is a reserved keyword and
	// MUST NOT be used in the unique identifier. REQUIRED and READ-ONLY.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// An identifier for the Resource as defined by the Service Consumer. The
	// externalId may simplify identification of the Resource between Service
	// Consumer and Service provider by allowing the Consumer to refer to the
	// Resource with its own identifier, obviating the need to store a local
	// mapping between the local identifier of the Resource and the identifier
	// used by the Service Provider. Each Resource MAY include a non-empty
	// externalId value. The value of the externalId attribute is always issued be
	// the Service Consumer and can never be specified by the Service Provider.
	// The Service Provider MUST always interpret the externalId as scoped to the
	// Service Consumer's tenant.
	ExternalId string `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// A human-readable name for the Group.  REQUIRED.
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// A list of members of the Group.  While values MAY be added or removed,
	// sub-attributes of members are "immutable".  The "value" sub-attribute
	// contains the value of an "id" attribute of a SCIM resource, and the "$ref"
	// sub-attribute must be the URI of a SCIM resource such as a "User", or a
	// "Group" (if nesting groups is supported).
	Members              []*Member `protobuf:"bytes,6,rep,name=members,proto3" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_60f9529f93aa5413, []int{0}
}

func (m *Group) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Group.Unmarshal(m, b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Group.Marshal(b, m, deterministic)
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return xxx_messageInfo_Group.Size(m)
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetSchemas() []string {
	if m != nil {
		return m.Schemas
	}
	return nil
}

func (m *Group) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Group) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *Group) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Group) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

// Member encodes https://tools.ietf.org/html/rfc7643#section-2.4 for the
// purpose of group members.
type Member struct {
	// A label indicating the type of resource, e.g., 'User' or 'Group'.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// A human-readable name, primarily used for display purposes and having a
	// mutability of "immutable".
	Display string `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
	// The members' email address. Identifier of the member of this Group.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// The URI corresponding to a SCIM resource that is a member of this Group.
	// URIs are canonicalized per Section 6.2 of [RFC3986]. While the
	// representation of a resource may vary in different SCIM protocol API
	// versions (see Section 3.13 of [RFC7644]), URIs for SCIM resources with an
	// API version SHALL be considered comparable to URIs without a version or
	// with a different version.  For example, "https://example.com/Users/12345"
	// is equivalent to "https://example.com/v2/Users/12345".
	Ref string `protobuf:"bytes,4,opt,name=ref,json=$ref,proto3" json:"ref,omitempty"`
	// CUSTOM EXTENSION. The issuer URL string of the identity, such as an
	// OIDC "iss" or similar depending on the protocol used for the identity.
	ExtensionIssuer string `protobuf:"bytes,5,opt,name=extension_issuer,json=issuer,proto3" json:"extension_issuer,omitempty"`
	// CUSTOM EXTENSION. The subject string of the identity, such as an
	// OIDC "sub" or similar depending on the protocol used for the identity.
	ExtensionSubject     string   `protobuf:"bytes,6,opt,name=extension_subject,json=subject,proto3" json:"extension_subject,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Member) Reset()         { *m = Member{} }
func (m *Member) String() string { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()    {}
func (*Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_60f9529f93aa5413, []int{1}
}

func (m *Member) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Member.Unmarshal(m, b)
}
func (m *Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Member.Marshal(b, m, deterministic)
}
func (m *Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Member.Merge(m, src)
}
func (m *Member) XXX_Size() int {
	return xxx_messageInfo_Member.Size(m)
}
func (m *Member) XXX_DiscardUnknown() {
	xxx_messageInfo_Member.DiscardUnknown(m)
}

var xxx_messageInfo_Member proto.InternalMessageInfo

func (m *Member) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Member) GetDisplay() string {
	if m != nil {
		return m.Display
	}
	return ""
}

func (m *Member) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Member) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *Member) GetExtensionIssuer() string {
	if m != nil {
		return m.ExtensionIssuer
	}
	return ""
}

func (m *Member) GetExtensionSubject() string {
	if m != nil {
		return m.ExtensionSubject
	}
	return ""
}

func init() {
	proto.RegisterType((*Group)(nil), "scim.v2.Group")
	proto.RegisterType((*Member)(nil), "scim.v2.Member")
}

func init() { proto.RegisterFile("proto/scim/v2/groups.proto", fileDescriptor_60f9529f93aa5413) }

var fileDescriptor_60f9529f93aa5413 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xc1, 0x4e, 0xe3, 0x30,
	0x10, 0x40, 0x95, 0xa6, 0x4d, 0x55, 0x77, 0xb5, 0xbb, 0xb5, 0xf6, 0x60, 0xed, 0x85, 0x50, 0x71,
	0x28, 0x87, 0x26, 0x52, 0xf9, 0x03, 0x38, 0x54, 0x1c, 0x40, 0x50, 0x6e, 0x5c, 0x2a, 0xc7, 0x9e,
	0x34, 0x46, 0x71, 0x1c, 0x79, 0x9c, 0x88, 0xfe, 0x0d, 0x17, 0xfe, 0x13, 0x25, 0x71, 0x84, 0xb8,
	0xe5, 0xbd, 0x19, 0x4d, 0x9e, 0x64, 0xf2, 0xbf, 0xb6, 0xc6, 0x99, 0x14, 0x85, 0xd2, 0x69, 0xbb,
	0x4b, 0x4f, 0xd6, 0x34, 0x35, 0x26, 0xbd, 0xa4, 0xf3, 0xce, 0x26, 0xed, 0x6e, 0xfd, 0x11, 0x90,
	0xd9, 0xbe, 0x9b, 0x50, 0x46, 0xe6, 0x28, 0x0a, 0xd0, 0x1c, 0x59, 0x10, 0x87, 0x9b, 0xc5, 0x61,
	0x44, 0xfa, 0x9b, 0x4c, 0x94, 0x64, 0x93, 0x38, 0xd8, 0x2c, 0x0e, 0x13, 0x25, 0xe9, 0x05, 0x59,
	0xc2, 0xbb, 0x03, 0x5b, 0xf1, 0xf2, 0xa8, 0x24, 0x0b, 0xfb, 0x01, 0x19, 0xd5, 0xbd, 0xa4, 0x97,
	0xe4, 0x97, 0x54, 0x58, 0x97, 0xfc, 0x7c, 0xac, 0xb8, 0x06, 0x36, 0xeb, 0x37, 0x96, 0xde, 0x3d,
	0x72, 0x0d, 0xf4, 0x9a, 0xcc, 0x35, 0xe8, 0x0c, 0x2c, 0xb2, 0x28, 0x0e, 0x37, 0xcb, 0xdd, 0x9f,
	0xc4, 0x27, 0x25, 0x0f, 0xbd, 0x3f, 0x8c, 0xf3, 0xf5, 0x67, 0x40, 0xa2, 0xc1, 0x51, 0x4a, 0xa6,
	0xee, 0x5c, 0x03, 0x0b, 0xfa, 0x83, 0xfd, 0x77, 0xd7, 0xed, 0x0f, 0xfb, 0xc4, 0x11, 0xe9, 0x3f,
	0x32, 0x6b, 0x79, 0xd9, 0x80, 0x2f, 0x1c, 0x80, 0xae, 0x48, 0x68, 0x21, 0x67, 0xd3, 0xe1, 0xc4,
	0x95, 0x85, 0x9c, 0xc6, 0xe4, 0x6f, 0x57, 0x5f, 0xa1, 0x32, 0xd5, 0x51, 0x21, 0x36, 0x60, 0x7d,
	0x73, 0x34, 0x10, 0x5d, 0x93, 0xd5, 0xf7, 0x06, 0x36, 0xd9, 0x1b, 0x08, 0xc7, 0xa2, 0xe1, 0x77,
	0x1e, 0x6f, 0x5f, 0x5e, 0x9f, 0x4f, 0xca, 0x15, 0x4d, 0x96, 0x08, 0xa3, 0xd3, 0xbd, 0x31, 0xa7,
	0x12, 0xee, 0x4a, 0xd3, 0xc8, 0xa7, 0x92, 0xbb, 0xdc, 0x58, 0x9d, 0x16, 0xc0, 0x4b, 0x57, 0x08,
	0x6e, 0x61, 0x9b, 0x83, 0x04, 0xcb, 0x1d, 0xc8, 0x2d, 0x17, 0x02, 0x10, 0xb7, 0x08, 0xb6, 0x55,
	0x02, 0x30, 0xfd, 0xf1, 0x6a, 0x59, 0xd4, 0xe3, 0xcd, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9c,
	0xf5, 0xda, 0xbe, 0xcd, 0x01, 0x00, 0x00,
}
