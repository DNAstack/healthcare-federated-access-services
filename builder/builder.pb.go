// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: builder/builder.proto

// Package builder provides protocol buffer versions of some of the top-level
// types from the ga4gh package, allowing builder.Build the ability to build
// 'real' versions of these messages from their protocol buffer counterparts.

package builder

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Validator struct {
	// Types that are valid to be assigned to Validator:
	//	*Validator_And_
	//	*Validator_Or_
	//	*Validator_Simple_
	//	*Validator_Constant_
	Validator            isValidator_Validator `protobuf_oneof:"validator"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba3046719757e1e, []int{0}
}

func (m *Validator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Validator.Unmarshal(m, b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return xxx_messageInfo_Validator.Size(m)
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

type isValidator_Validator interface {
	isValidator_Validator()
}

type Validator_And_ struct {
	And *Validator_And `protobuf:"bytes,1,opt,name=and,proto3,oneof"`
}

type Validator_Or_ struct {
	Or *Validator_Or `protobuf:"bytes,2,opt,name=or,proto3,oneof"`
}

type Validator_Simple_ struct {
	Simple *Validator_Simple `protobuf:"bytes,3,opt,name=simple,proto3,oneof"`
}

type Validator_Constant_ struct {
	Constant *Validator_Constant `protobuf:"bytes,4,opt,name=constant,proto3,oneof"`
}

func (*Validator_And_) isValidator_Validator() {}

func (*Validator_Or_) isValidator_Validator() {}

func (*Validator_Simple_) isValidator_Validator() {}

func (*Validator_Constant_) isValidator_Validator() {}

func (m *Validator) GetValidator() isValidator_Validator {
	if m != nil {
		return m.Validator
	}
	return nil
}

func (m *Validator) GetAnd() *Validator_And {
	if x, ok := m.GetValidator().(*Validator_And_); ok {
		return x.And
	}
	return nil
}

func (m *Validator) GetOr() *Validator_Or {
	if x, ok := m.GetValidator().(*Validator_Or_); ok {
		return x.Or
	}
	return nil
}

func (m *Validator) GetSimple() *Validator_Simple {
	if x, ok := m.GetValidator().(*Validator_Simple_); ok {
		return x.Simple
	}
	return nil
}

func (m *Validator) GetConstant() *Validator_Constant {
	if x, ok := m.GetValidator().(*Validator_Constant_); ok {
		return x.Constant
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Validator) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Validator_And_)(nil),
		(*Validator_Or_)(nil),
		(*Validator_Simple_)(nil),
		(*Validator_Constant_)(nil),
	}
}

type Validator_And struct {
	Validators           []*Validator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Validator_And) Reset()         { *m = Validator_And{} }
func (m *Validator_And) String() string { return proto.CompactTextString(m) }
func (*Validator_And) ProtoMessage()    {}
func (*Validator_And) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba3046719757e1e, []int{0, 0}
}

func (m *Validator_And) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Validator_And.Unmarshal(m, b)
}
func (m *Validator_And) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Validator_And.Marshal(b, m, deterministic)
}
func (m *Validator_And) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator_And.Merge(m, src)
}
func (m *Validator_And) XXX_Size() int {
	return xxx_messageInfo_Validator_And.Size(m)
}
func (m *Validator_And) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator_And.DiscardUnknown(m)
}

var xxx_messageInfo_Validator_And proto.InternalMessageInfo

func (m *Validator_And) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

type Validator_Or struct {
	Validators           []*Validator `protobuf:"bytes,2,rep,name=validators,proto3" json:"validators,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Validator_Or) Reset()         { *m = Validator_Or{} }
func (m *Validator_Or) String() string { return proto.CompactTextString(m) }
func (*Validator_Or) ProtoMessage()    {}
func (*Validator_Or) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba3046719757e1e, []int{0, 1}
}

func (m *Validator_Or) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Validator_Or.Unmarshal(m, b)
}
func (m *Validator_Or) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Validator_Or.Marshal(b, m, deterministic)
}
func (m *Validator_Or) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator_Or.Merge(m, src)
}
func (m *Validator_Or) XXX_Size() int {
	return xxx_messageInfo_Validator_Or.Size(m)
}
func (m *Validator_Or) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator_Or.DiscardUnknown(m)
}

var xxx_messageInfo_Validator_Or proto.InternalMessageInfo

func (m *Validator_Or) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

type Validator_Simple struct {
	Claims               map[string]string `protobuf:"bytes,1,rep,name=claims,proto3" json:"claims,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Validator_Simple) Reset()         { *m = Validator_Simple{} }
func (m *Validator_Simple) String() string { return proto.CompactTextString(m) }
func (*Validator_Simple) ProtoMessage()    {}
func (*Validator_Simple) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba3046719757e1e, []int{0, 2}
}

func (m *Validator_Simple) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Validator_Simple.Unmarshal(m, b)
}
func (m *Validator_Simple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Validator_Simple.Marshal(b, m, deterministic)
}
func (m *Validator_Simple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator_Simple.Merge(m, src)
}
func (m *Validator_Simple) XXX_Size() int {
	return xxx_messageInfo_Validator_Simple.Size(m)
}
func (m *Validator_Simple) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator_Simple.DiscardUnknown(m)
}

var xxx_messageInfo_Validator_Simple proto.InternalMessageInfo

func (m *Validator_Simple) GetClaims() map[string]string {
	if m != nil {
		return m.Claims
	}
	return nil
}

type Validator_Constant struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Validator_Constant) Reset()         { *m = Validator_Constant{} }
func (m *Validator_Constant) String() string { return proto.CompactTextString(m) }
func (*Validator_Constant) ProtoMessage()    {}
func (*Validator_Constant) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba3046719757e1e, []int{0, 3}
}

func (m *Validator_Constant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Validator_Constant.Unmarshal(m, b)
}
func (m *Validator_Constant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Validator_Constant.Marshal(b, m, deterministic)
}
func (m *Validator_Constant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator_Constant.Merge(m, src)
}
func (m *Validator_Constant) XXX_Size() int {
	return xxx_messageInfo_Validator_Constant.Size(m)
}
func (m *Validator_Constant) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator_Constant.DiscardUnknown(m)
}

var xxx_messageInfo_Validator_Constant proto.InternalMessageInfo

func (m *Validator_Constant) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

func init() {
	proto.RegisterType((*Validator)(nil), "builder.Validator")
	proto.RegisterType((*Validator_And)(nil), "builder.Validator.And")
	proto.RegisterType((*Validator_Or)(nil), "builder.Validator.Or")
	proto.RegisterType((*Validator_Simple)(nil), "builder.Validator.Simple")
	proto.RegisterMapType((map[string]string)(nil), "builder.Validator.Simple.ClaimsEntry")
	proto.RegisterType((*Validator_Constant)(nil), "builder.Validator.Constant")
}

func init() { proto.RegisterFile("builder/builder.proto", fileDescriptor_3ba3046719757e1e) }

var fileDescriptor_3ba3046719757e1e = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd2, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0x07, 0xf0, 0xfe, 0xd0, 0xba, 0xbe, 0x5e, 0x24, 0x38, 0xa9, 0xf5, 0x32, 0x04, 0x71, 0x08,
	0x76, 0xd2, 0x79, 0xd8, 0x04, 0x0f, 0xdb, 0x10, 0x7a, 0x1b, 0x44, 0xf0, 0xe0, 0x2d, 0x6b, 0x43,
	0x17, 0x6c, 0x93, 0x91, 0x66, 0x83, 0x5d, 0xfd, 0xaf, 0xbd, 0xc9, 0xb2, 0x74, 0x0e, 0x9d, 0xe0,
	0xa9, 0x7d, 0xe5, 0xf3, 0x6d, 0xfb, 0x5e, 0x1e, 0xb4, 0x67, 0x4b, 0x56, 0xe6, 0x54, 0xf6, 0xcc,
	0x35, 0x5e, 0x48, 0xa1, 0x04, 0x3a, 0x31, 0xe5, 0xd5, 0xa7, 0x0b, 0xfe, 0x2b, 0x29, 0x59, 0x4e,
	0x94, 0x90, 0xe8, 0x16, 0x5c, 0xc2, 0xf3, 0xd0, 0xee, 0xd8, 0xdd, 0x20, 0x39, 0x8f, 0x9b, 0xcc,
	0x0e, 0xc4, 0x23, 0x9e, 0xa7, 0x16, 0xde, 0x20, 0x74, 0x03, 0x8e, 0x90, 0xa1, 0xa3, 0x69, 0xfb,
	0x00, 0x9d, 0xca, 0xd4, 0xc2, 0x8e, 0x90, 0xa8, 0x0f, 0x5e, 0xcd, 0xaa, 0x45, 0x49, 0x43, 0x57,
	0xe3, 0x8b, 0x03, 0xf8, 0x45, 0x83, 0xd4, 0xc2, 0x86, 0xa2, 0x21, 0xb4, 0x32, 0xc1, 0x6b, 0x45,
	0xb8, 0x0a, 0x8f, 0x74, 0xec, 0xf2, 0x40, 0x6c, 0x62, 0x48, 0x6a, 0xe1, 0x1d, 0x8f, 0x86, 0xe0,
	0x8e, 0x78, 0x8e, 0x12, 0x80, 0x55, 0x03, 0xeb, 0xd0, 0xee, 0xb8, 0xdd, 0x20, 0x41, 0xbf, 0xdf,
	0x81, 0xf7, 0x54, 0x34, 0x00, 0x67, 0x2a, 0x7f, 0x24, 0x9d, 0x7f, 0x25, 0x3f, 0x6c, 0xf0, 0xb6,
	0x4d, 0xa0, 0x27, 0xf0, 0xb2, 0x92, 0xb0, 0xaa, 0xf9, 0xe8, 0xf5, 0x9f, 0xfd, 0xc6, 0x13, 0xed,
	0x9e, 0xb9, 0x92, 0x6b, 0x6c, 0x42, 0xd1, 0x10, 0x82, 0xbd, 0xc7, 0xe8, 0x14, 0xdc, 0x77, 0xba,
	0xd6, 0x47, 0xe2, 0xe3, 0xcd, 0x2d, 0x3a, 0x83, 0xe3, 0x15, 0x29, 0x97, 0x54, 0xcf, 0xde, 0xc7,
	0xdb, 0xe2, 0xd1, 0x19, 0xd8, 0x51, 0x07, 0x5a, 0xcd, 0x44, 0xbe, 0xd5, 0x26, 0xd9, 0x32, 0x6a,
	0x1c, 0x80, 0xbf, 0xfb, 0xe9, 0x71, 0xf2, 0x76, 0x5f, 0x30, 0x35, 0x5f, 0xce, 0xe2, 0x4c, 0x54,
	0xbd, 0x42, 0x88, 0xa2, 0xa4, 0x05, 0xe5, 0xa2, 0x62, 0x59, 0xdd, 0x2b, 0xc8, 0x43, 0x31, 0xbf,
	0x63, 0x39, 0xe5, 0x8a, 0xa9, 0x75, 0xb3, 0x3e, 0x33, 0x4f, 0xef, 0x4f, 0xff, 0x2b, 0x00, 0x00,
	0xff, 0xff, 0x13, 0xce, 0x9e, 0xb8, 0x58, 0x02, 0x00, 0x00,
}
