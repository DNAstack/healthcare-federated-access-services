// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package storage

import (
	"fmt"
	"regexp"
	"strings"

	"github.com/golang/protobuf/proto" /* copybara-comment */
)

const (
	LatestRev      = int64(-1)
	LatestRevName  = "latest"
	HistoryRevName = "history"
	DefaultRealm   = "master"
	DefaultUser    = ""
	DefaultID      = "main"
	WipeAllRealms  = ""

	AccountDatatype        = "account"
	AccountLookupDatatype  = "acct_lookup"
	AuthCodeDatatype       = "auth_code"
	ClientDatatype         = "client"
	ConfigDatatype         = "config"
	LoginStateDatatype     = "login_state"
	AuthTokenStateDatatype = "auth_token_state"
	PermissionsDatatype    = "permissions"
	SecretsDatatype        = "secrets"
	TokensDatatype         = "tokens"

	ResourceTokenRequestStateDataType = "resource_token_state"

	// StateActive indicates an object is active.
	StateActive = "ACTIVE"
	// StateDeleted indicates an object is deleted (can still be referenced by an admin).
	StateDeleted = "DELETED"
	// StateDisabled indicates an object is disabled (may be reactived later).
	StateDisabled = "DISABLED"

	// DefaultPageSize is the default number of entries returned by a list.
	DefaultPageSize = 50
	// MaxPageSize is the maximum number of entries returned by a list.
	MaxPageSize = 1000
)

var (
	filterRE = regexp.MustCompile(`(?i)(([^\s]+)\s+(eq|ne|co|sw|ew|pr|gt|ge|lt|le)\s+"([^"]*)(\s+(or|OR|Or|oR)\s+)?)+"`)
)

// Store is an interface to the storage layer.
type Store interface {
	Info() map[string]string
	Exists(datatype, realm, user, id string, rev int64) (bool, error)
	Read(datatype, realm, user, id string, rev int64, content proto.Message) error
	ReadTx(datatype, realm, user, id string, rev int64, content proto.Message, tx Tx) error
	// MultiReadTx reads a set of objects matching the input parameters and filters. Returns total count and error.
	MultiReadTx(datatype, realm, user string, filters []Filter, offset, pageSize int, content map[string]map[string]proto.Message, typ proto.Message, tx Tx) (int, error)
	ReadHistory(datatype, realm, user, id string, content *[]proto.Message) error
	ReadHistoryTx(datatype, realm, user, id string, content *[]proto.Message, tx Tx) error
	Write(datatype, realm, user, id string, rev int64, content proto.Message, history proto.Message) error
	WriteTx(datatype, realm, user, id string, rev int64, content proto.Message, history proto.Message, tx Tx) error
	Delete(datatype, realm, user, id string, rev int64) error
	DeleteTx(datatype, realm, user, id string, rev int64, tx Tx) error
	MultiDeleteTx(datatype, realm, user string, tx Tx) error
	Wipe(realm string) error
	Tx(update bool) (Tx, error)
}

type Tx interface {
	Finish()
	Rollback()
	IsUpdate() bool
}

// Filter is a means to filter which entries are returned from MultiReadTx.
type Filter struct {
	// Field is the name of the field
	extract func(p proto.Message) string
	compare string
	value   string
}

func ErrNotFound(err error) bool {
	// TODO: make this smarter.
	return strings.Contains(err.Error(), "not found") || strings.Contains(err.Error(), "no such file")
}

// BuildFilters creates a set of filters based on an input string.
// Within the field map, SCIM path names are expected to be lowercase.
// Example:
//   BuildFilters(`name.formatted eq "Joe" or name.familyName sw "Smith"`, map[string]func(p proto.Message) string {
//     "name.formatted": func(p proto.Message) string {
//       return myProtoCast(p).Profile.Name
//     },
//     "name.familyname": func(p proto.Message) string {
//       return myProtoCast(p).Profile.FamilyName
//     },
//   })
// The filters generated by this method can be evaluated with a proto input using
// MatchProtoFilters(filters, myProto).
func BuildFilters(str string, fields map[string]func(p proto.Message) string) ([]Filter, error) {
	if len(str) == 0 {
		return nil, nil
	}
	match := filterRE.FindAllStringSubmatch(str, -1)
	if len(match) == 0 {
		return nil, fmt.Errorf("invalid filter %q", str)
	}
	out := []Filter{}
	for _, m := range match {
		fn, ok := fields[strings.ToLower(m[2])]
		if !ok {
			return nil, fmt.Errorf("field %q not defined", m[2])
		}
		out = append(out, Filter{extract: fn, compare: strings.ToLower(m[3]), value: strings.ToLower(m[4])})
	}
	return out, nil
}

// MatchProtoFilters returns true if any of the filter conditions are met
// (i.e. evaluates an OR of this array of filters).
// Simplified version of: https://tools.ietf.org/html/rfc7644#section-3.4.2.2
func MatchProtoFilters(orFilters []Filter, p proto.Message) bool {
	if len(orFilters) == 0 {
		return true
	}
	for _, f := range orFilters {
		a := strings.ToLower(f.extract(p))
		b := f.value
		switch {
		// Starts with
		case f.compare == "sw" && strings.HasPrefix(a, b):
			return true
		// Equals
		case f.compare == "eq" && a == b:
			return true
		// Not equals
		case f.compare == "ne" && a != b:
			return true
		// Contains
		case f.compare == "co" && strings.Contains(a, b):
			return true
		// Ends with
		case f.compare == "ew" && strings.HasSuffix(a, b):
			return true
		// Present
		case f.compare == "pr" && len(a) > 0:
			return true
		// Greater than
		case f.compare == "gt" && strings.Compare(a, b) > 0:
			return true
		// Greater than or equal to
		case f.compare == "ge" && strings.Compare(a, b) >= 0:
			return true
		// Less than
		case f.compare == "lt" && strings.Compare(a, b) < 0:
			return true
		// Less than or equal to
		case f.compare == "le" && strings.Compare(a, b) <= 0:
			return true
		}
	}
	return false
}
